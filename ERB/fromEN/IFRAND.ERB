;--------------------------------------------
;IFRAND CODED BY 喚く
;乱数を生成する関数。与えた条件に応じて返却される乱数の範囲を切り替えられる
;あと負数を返させることもできる
;「メッセージをRANDで分岐させたいが、キャラが特定の素質を持っている場合この分岐だけ弾きたい」みたいなときに使える

;返却する値は10000通りまでいける。増やしたければRANDARRAYを増やすこと

;VARSTR:0-5	生成する値をコンマ区切りで指定する。
;			要素1つにつき1000個まで指定子が入る
;			含まれる値が返却候補となるには、対応するCONDITIONが真である必要がある
;			なお、返却候補の値が被っていた場合、単純に二重に入る（その値の選択される確率が倍になる）

;指定子の書き方
;方法①：A, B, C...	単純な追加。返却候補にAとBとCが入る
;方法②：ATOB, ....	単純な返却候補にAからBまでの連続した値が入る
;					なおA<Bである必要はない
;方法③：D1, D2...	指定した値を、返却候補から除外する
;					削除処理は各VARSTRの処理が行われた後、返却直前に行われる
;					したがって、VARSTR:0で除外指定をしたのちVARSTR:1で追加指定をしても、その値は返却候補とならない
;					同じ値が複数返却候補に含まれている場合も同様である
;方法④：D1TO10...	削除指定でもTOでの指定が使える。

;CONDITION:0-5	真偽値。真だった場合、対応するVARSTRを返却候補に含める
;				たとえば「LOCAL:0番のキャラが巨乳のときだけ、VARSTR:1に与えた値を返却候補に含めたい」なら、
;				CONDITION:1にTALENT:(LOCAL:0):巨乳 == 1 を与えればよい

;用例
;LOCAL:0 = IFRAND("0TO5, 7", 1, "6TO10", TALENT:(ARG:0):仮性包茎, "D1, D7, D8", TALENT:(ARG:0):爆乳)
;LOCAL:0に0-5,7のいずれかを代入。ARG:0のキャラが仮性包茎なら6-10も候補に含まれるため、0-10(7だけ確率倍)となる。ただし、ARG:0のキャラが爆乳なら1と7と8は代入させない。

;注意点
;最終的に返すべき値がない場合や、指定子の書き方が不正である場合、エラーを吐いて落ちる。
;---------------------------------------------
@IFRAND(VALSTR:0, CONDITION:0, VALSTR:1 = "", CONDITION:1 = 0, VALSTR:2 = "" , CONDITION:2 = 0, VALSTR:3 = "", CONDITION:3 = 0, VALSTR:4 = "", CONDITION:4 = 0, VALSTR:5 = "", CONDITION:5 = 0, VALSTR:6 = "", CONDITION:6 = 0, VALSTR:7 = "", CONDITION:7 = 0, VALSTR:8 = "", CONDITION:8 = 0, VALSTR:9 = "", CONDITION:9 = 0, VALSTR:10 = "", CONDITION:10 = 0, VALSTR:11 = "", CONDITION:11 = 0, VALSTR:12 = "", CONDITION:12 = 0, VALSTR:13 = "", CONDITION:13 = 0, VALSTR:14 = "", CONDITION:14 = 0, VALSTR:15 = "", CONDITION:15 = 0, VALSTR:16 = "", CONDITION:16 = 0, VALSTR:17 = "", CONDITION:17 = 0, VALSTR:18 = "", CONDITION:18 = 0, VALSTR:19 = "", CONDITION:19 = 0)
#FUNCTION
;値指定文字列
#DIMS VALSTR, 20
;値指定が有効か　呼び出し側で真偽判定ぶっこんでください（対象が巨乳か？　とか）
#DIM CONDITION, 20
;コンマでSPLITされた後の値指定
#DIMS SPLIT_VALSTR, 1000
;値指定の分割数
#DIM SPLIT_VALSTR_NUM
;今見ている値指定
#DIMS THIS_VALSTR
;値指定で範囲指定を利用した時用
#DIMS RANGESTR, 2
#DIM RANGE, 2
;最終的に生成される乱数を格納する配列
#DIM RANDARRAY, 10000
;最終的に生成される乱数の候補数
#DIM RAND_NUM
;削除する値を格納する配列
#DIM DELETEARRAY, 10000
;削除する値の
#DIM DELETE_NUM
;RESULT保存用(汚染するため)
#DIM SAVED_RESULT

VARSET RANDARRAY
VARSET RAND_NUM
VARSET DELETEARRAY
VARSET DELETE_NUM

SAVED_RESULT = RESULT

FOR LOCAL, 0, VARSIZE("CONDITION")

	;真偽判定が偽であればその値指定を無視する
	SIF !CONDITION:LOCAL
		CONTINUE

	;値指定を分割する
	SPLIT VALSTR:LOCAL, "," , SPLIT_VALSTR
	SPLIT_VALSTR_NUM = RESULT

	FOR LOCAL:1, 0, SPLIT_VALSTR_NUM
		;スペースを除去
		THIS_VALSTR = %SPLIT_VALSTR:(LOCAL:1)%
		THIS_VALSTR = %REPLACE(THIS_VALSTR, "　", "")%
		THIS_VALSTR = %REPLACE(THIS_VALSTR, " ", "")%

		;空文字列になったら無視
		SIF THIS_VALSTR == ""
			CONTINUE

		;消去指定を利用している場合
		IF STRFIND(THIS_VALSTR, "D") == 0
			THIS_VALSTR = %SUBSTRING(THIS_VALSTR, 1)%
			;消去指定で範囲指定
			IF STRFIND(THIS_VALSTR, "TO") != -1
				;ATOBを「値Aと値B」にしてRANGEに格納
				SPLIT THIS_VALSTR, "TO", RANGESTR
				SIF !ISNUMERIC(RANGESTR:0) || !ISNUMERIC(RANGESTR:1)
					THROW 削除範囲指定に不正な値が含まれています %THIS_VALSTR%
				RANGE:0 = TOINT(RANGESTR:0)
				RANGE:1 = TOINT(RANGESTR:1)
				;ATOBをDELETEARRAYに格納
				FOR LOCAL:2, MIN(RANGE:0, RANGE:1), MAX(RANGE:0, RANGE:1) + 1
					DELETEARRAY:DELETE_NUM = LOCAL:2
					DELETE_NUM ++
				NEXT
			;消去指定の単一値指定
			ELSE
				SIF !ISNUMERIC(THIS_VALSTR)
					THROW 削除値指定に不正な値が含まれています %THIS_VALSTR%
				DELETEARRAY:DELETE_NUM = TOINT(THIS_VALSTR)
				DELETE_NUM ++
			ENDIF

		;範囲指定を利用している場合
		ELSEIF STRFIND(THIS_VALSTR, "TO") != -1
			;A-Bを「値Aと値B」にしてRANGEに格納
			SPLIT THIS_VALSTR, "TO", RANGESTR
			SIF !ISNUMERIC(RANGESTR:0) || !ISNUMERIC(RANGESTR:1)
				THROW 範囲指定に不正な値が含まれています %THIS_VALSTR%
			RANGE:0 = TOINT(RANGESTR:0)
			RANGE:1 = TOINT(RANGESTR:1)
			;ATOBをRANDARRAYに格納
			FOR LOCAL:2, MIN(RANGE:0, RANGE:1), MAX(RANGE:0, RANGE:1) + 1
				RANDARRAY:RAND_NUM = LOCAL:2
				RAND_NUM ++
			NEXT

		;単一の値である場合
		ELSE
			SIF !ISNUMERIC(THIS_VALSTR)
				THROW 値指定に不正な値が含まれています %THIS_VALSTR%
			RANDARRAY:RAND_NUM = TOINT(THIS_VALSTR)
			RAND_NUM ++
		ENDIF
	NEXT
NEXT


FOR LOCAL, 0, DELETE_NUM
	WHILE FINDELEMENT(RANDARRAY, DELETEARRAY:LOCAL, 0, RAND_NUM) != -1
		LOCAL:1 = FINDELEMENT(RANDARRAY, DELETEARRAY:LOCAL, 0, RAND_NUM)
;		PRINTFORML {DELETEARRAY:LOCAL} {LOCAL:1}, 
		IF LOCAL:1 == VARSIZE("RANDARRAY") - 1
			RANDARRAY:(LOCAL:1) = 0
		ELSE
			;こいつなんか第二引数の正負で挙動違うんだけど
			ARRAYSHIFT RANDARRAY, -1, 0, LOCAL:1
		ENDIF
		RAND_NUM -= 1
	WEND
NEXT

SIF RAND_NUM == 0
	THROW IFRANDの返却候補値が一つもありません

;汚染されたRESULTを元に戻す
RESULT = SAVED_RESULT

RETURNF RANDARRAY:(RAND:RAND_NUM)

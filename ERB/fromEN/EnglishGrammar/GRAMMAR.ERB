;ARG, who it is
;ARG:1, if it's His/Her or his/her
@HE_SHE(ARG, ARG:1)
#FUNCTIONS
#DIMS OUTPUT
OUTPUT '= @"%TALENT:ARG:성별 == 2?"He"#"She"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

;ARG, who it is
;ARG:1, if it's His/Her or his/her
@HES_SHES(ARG, ARG:1)
#FUNCTIONS
#DIMS OUTPUT
OUTPUT '= @"%TALENT:ARG:성별 == 2?"He's"#"She's"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT


;ARG, who it is
;ARG:1, if it's His/Her or his/her
@HIS_HER(ARG, ARG:1)
#FUNCTIONS
#DIMS OUTPUT
OUTPUT '= @"%TALENT:ARG:성별 == 2?"His"#"Her"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

;ARG, who it is
;ARG:1, if it's His/Her or his/her
;ARG:2, force third person (avoids "you"s)
@HIM_HER(ARG, ARG:1, ARG:2)
#FUNCTIONS
#DIMS OUTPUT
OUTPUT '= @"%TALENT:ARG:성별 == 2?"Him"#"Her"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

;ARG, who it is
;ARG:1, if it's His/Her or his/her
;ARG:2, force third person (avoids "you"s)
@HIS_HERS(ARG, ARG:1, ARG:2)
#FUNCTIONS
#DIMS OUTPUT
IF !ARG && !ARG:2
	OUTPUT = Your
ELSE
	OUTPUT '= @"%TALENT:ARG:성별 == 2?"His"#"Hers"%"
ENDIF
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

;ARG, who it is
;ARG:1, if it's Himself/Herself or himself/herself
;ARG:2, force third person (avoids "yourself")
@HIMSELF_HERSELF(ARG, ARG:1, ARG:2)
#FUNCTIONS
#DIMS OUTPUT
OUTPUT '= @"%TALENT:ARG:성별 == 2?"Himself"#"Herself"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

;Children are not people
@HE_SHE_CHILD(ARG,ARG:1, CHILDNUM)
#FUNCTIONS
#DIM CHILDNUM
#DIMS OUTPUT
OUTPUT '= @"%CHILD_SEX:ARG:CHILDNUM == 1?"She"#"He"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

@HIM_HER_CHILD(ARG,ARG:1,CHILDNUM)
#FUNCTIONS
#DIM CHILDNUM
#DIMS OUTPUT
OUTPUT '= @"%CHILD_SEX:ARG:CHILDNUM == 1?"Her"#"Him"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

@HIS_HER_CHILD(ARG,ARG:1,CHILDNUM)
#FUNCTIONS
#DIM CHILDNUM
#DIMS OUTPUT
OUTPUT '= @"%CHILD_SEX:ARG:CHILDNUM == 1?"Her"#"His"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

@HIS_HERS_CHILD(ARG,ARG:1,CHILDNUM)
#FUNCTIONS
#DIM CHILDNUM
#DIMS OUTPUT
OUTPUT '= @"%CHILD_SEX:ARG:CHILDNUM == 1?"Hers"#"His"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

@HIMSELF_HERSELF_CHILD(ARG,ARG:1,CHILDNUM)
#FUNCTIONS
#DIM CHILDNUM
#DIMS OUTPUT
OUTPUT '= @"%CHILD_SEX:ARG:CHILDNUM == 1?"Herself"#"Himself"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

@BOY_GIRL_CHILD(ARG,ARG:1, CHILDNUM)
#FUNCTIONS
#DIM CHILDNUM
#DIMS OUTPUT
OUTPUT '= @"%CHILD_SEX:ARG:CHILDNUM == 1?"Girl"#"Boy"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT

@SON_DAUGHTER_CHILD(ARG,ARG:1, CHILDNUM)
#FUNCTIONS
#DIM CHILDNUM
#DIMS OUTPUT
OUTPUT '= @"%CHILD_SEX:ARG:CHILDNUM == 1?"Daughter"#"Son"%"
SIF !ARG:1
	OUTPUT = %TOLOWER(OUTPUT)%
RETURNF OUTPUT


;*************************************************
;Print mutually exclusive terms depending on the condition per function
;Default returning terms defined here can be overridden with _ to define your own
;Example: %PRINT_MALE("man_:breeding sow")%
;Capitalization depends on the case of the arguments
;*************************************************
@PRINT_MALE(ARGS, ARG:0 = -1)
#FUNCTIONS
SIF ARG < 0
	ARG = TARGET
SIF !STRLENS(ARGS)
	ARGS = guy
IF STRFIND(ARGS, "_") >= 0
	ARGS '= REPLACE(ARGS, "_", "")
	GOTO CUSTOM
ENDIF
	
SELECTCASE SPLIT_SINGLE(TOLOWER(ARGS:0))
	CASE "boy"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "girl"
	CASE "man"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "woman"
	CASE "lad"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "lass"
	CASE "guy"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "girl"
	CASE "fellow", "fella"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "gal"
	CASE "male"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "female"
	CASE "mister"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "miss"
	CASE "mr."
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "ms."
	CASE "incubus"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "succubus"
	CASE "shota"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "loli"
	CASE "son"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "daughter"
	CASE "sir"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "miss"
	CASE "men"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "women"
	CASE "husband"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "wife"
	CASE "fiancé", "fiance"
		LOCALS '= IS_MALE(ARG:0) ? "fiancé" # "fiancée"
	CASE "papa"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "mama"
	CASE "男"
		LOCALS '= IS_MALE(ARG:0) ? TOLOWER(ARGS:0) # "女"
CASEELSE
	$CUSTOM
	LOCALS '= IS_MALE(ARG:0) ? SPLIT_SINGLE(TOLOWER(ARGS:0)) # SPLIT_SINGLE(TOLOWER(ARGS:0), 1)
ENDSELECT
RETURNF IS_CAPITALIZED(ARGS:0) ? CAPITALIZE(LOCALS) # LOCALS

@CONJUGATOR(ARGS, ARG:0)
#FUNCTIONS
IF SPLIT_CHECK(ARGS:0, "ing")
	LOCALS:0 '= VERBT_CONTINUOUS(SPLIT_SINGLE(ARGS:0), ARG:0)
ELSEIF SPLIT_CHECK(ARGS:0, "s")
	LOCALS:0 '= VERBT_SIMPLE(SPLIT_SINGLE(ARGS:0), ARG:0)
ELSEIF SPLIT_CHECK(ARGS:0, "ed")
	LOCALS:0 '= VERBT_PAST(SPLIT_SINGLE(ARGS:0))
ELSE
	LOCALS:0 '= SPLIT_SINGLE(ARGS:0)
ENDIF
RETURNF LOCALS

;--------------------------------------------------------
;changes verbs to present continuous tense (ing), not exactly correct on the CVC rule for multi-syllable words
;note this function acts on the first word of the string
;--------------------------------------------------------
@VERBT_CONTINUOUS(ARGS:0, ARG:0 = -1)
#FUNCTIONS
SIF !ARG:0
	RETURNF ARGS:0
;try to affect only first word if sentence is passed
LOCALS = 
IF STRCOUNT(ARGS:0, " ") > 0
	LOCALS:0 '= SPLIT_SINGLE(ARGS:0, 0, " ")
	LOCALS:1 '= REPLACE(ARGS, SPLIT_SINGLE(ARGS:0, 0, " "), "")
	ARGS:0 '= LOCALS:0
ENDIF

IF WORD_ENDS_IN(ARGS:0, "[^aieou][aeiou][^aeiouwxy]") && (!WORD_ENDS_IN(ARGS:0, "er", "en", "o.", "[^p]el") || STRCOUNT(TOLOWER(ARGS:0), "throb|^gel$")) ;complicated to explain... CVC rule for doubling last letter + some exception
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]*[^aieou][aeiou]([^aeiouwxy]))(?=\s|$)", "$1$2ing")%
ELSEIF WORD_ENDS_IN(ARGS:0, "ie") ;if word ends in "ie", drop and add "ying"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)ie(?=\s|$)", "$1ying")%
ELSEIF WORD_ENDS_IN(ARGS:0, "[^aeiou]e") ;if word ends in silent "e", drop and add "ing"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+[^aeiou])e(?=\s|$)", "$1ing")%
ELSEIF WORD_ENDS_IN(ARGS:0, "sue") ;try resolving the problem with words like sue, issue, pursue, etc
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)e(?=\s|$)", "$1ing")%
ELSE ;add "ing"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?=\s|$)", "$1ing")%
ENDIF
SIF STRLENS(LOCALS)
	ARGS:0 = %ARGS:0%%LOCALS:1%

RETURNF ARGS:0

;--------------------------------------------------------
;Check if first word in string ARGS:0 ends in any specified substring ARGS:1 through ARGS:9
;--------------------------------------------------------
@WORD_ENDS_IN(ARGS:0, ARGS:1 = "NULL", ARGS:2 = "NULL", ARGS:3 = "NULL", ARGS:4 = "NULL", ARGS:5 = "NULL", ARGS:6 = "NULL", ARGS:7 = "NULL", ARGS:8 = "NULL", ARGS:9 = "NULL")
#FUNCTION
RETURNF STRCOUNT(ARGS:0, "^[^\s]*(" + ARGS:1 + "|" + ARGS:2 + "|" + ARGS:3 + "|" + ARGS:4 + "|" + ARGS:5 + "|" + ARGS:6 + "|" + ARGS:7 + "|" + ARGS:8 + "|" + ARGS:9 + ")(?=\s|$)")

;--------------------------------------------------------
;Check if a string ARGS:0 ends in any specified substring ARGS:1 through ARGS:9
;--------------------------------------------------------
@STRING_ENDS_IN(ARGS:0, ARGS:1 = "NULL", ARGS:2 = "NULL", ARGS:3 = "NULL", ARGS:4 = "NULL", ARGS:5 = "NULL", ARGS:6 = "NULL", ARGS:7 = "NULL", ARGS:8 = "NULL", ARGS:9 = "NULL")
#FUNCTION
RETURNF STRCOUNT(ARGS:0, "(" + ARGS:1 + "|" + ARGS:2 + "|" + ARGS:3 + "|" + ARGS:4 + "|" + ARGS:5 + "|" + ARGS:6 + "|" + ARGS:7 + "|" + ARGS:8 + "|" + ARGS:9 + ")$")

;--------------------------------------------------------
;Check if first word in string ARGS:0 starts in any specified substring ARGS:1 through ARGS:9
;--------------------------------------------------------
@WORD_STARTS_IN(ARGS:0, ARGS:1 = "NULL", ARGS:2 = "NULL", ARGS:3 = "NULL", ARGS:4 = "NULL", ARGS:5 = "NULL", ARGS:6 = "NULL", ARGS:7 = "NULL", ARGS:8 = "NULL", ARGS:9 = "NULL")
#FUNCTION

RETURNF STRCOUNT(ARGS:0, "^(" + ARGS:1 + "|" + ARGS:2 + "|" + ARGS:3 + "|" + ARGS:4 + "|" + ARGS:5 + "|" + ARGS:6 + "|" + ARGS:7 + "|" + ARGS:8 + "|" + ARGS:9 + ")")

;--------------------------------------------------------
;Check if a string ARGS:0 starts in any specified substring ARGS:1 through ARGS:9
;--------------------------------------------------------
@STRING_STARTS_IN(ARGS:0, ARGS:1 = "NULL", ARGS:2 = "NULL", ARGS:3 = "NULL", ARGS:4 = "NULL", ARGS:5 = "NULL", ARGS:6 = "NULL", ARGS:7 = "NULL", ARGS:8 = "NULL", ARGS:9 = "NULL")
#FUNCTION

RETURNF STRCOUNT(ARGS:0, "^(" + ARGS:1 + "|" + ARGS:2 + "|" + ARGS:3 + "|" + ARGS:4 + "|" + ARGS:5 + "|" + ARGS:6 + "|" + ARGS:7 + "|" + ARGS:8 + "|" + ARGS:9 + ")")

;--------------------------------------------------------
;changes verbs to 3rd person simple present tense (s)
;note this function acts on the first word of the string
;--------------------------------------------------------
@VERBT_SIMPLE(ARGS:0, ARG:0 = -1)
#FUNCTIONS
SIF !ARG:0 
	RETURNF ARGS:0
IF WORD_ENDS_IN(ARGS:0, "[^aeiou]y") ;if last letter is "y" not preceded by a vowel, drop it and add "ies"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+[^aeiou])y(?=\s|$)", "$1ies")%
ELSEIF WORD_ENDS_IN(ARGS:0, "x", "s", "ch", "sh", "o") ;if word ends in "x", "s", "ss" "sh", "o" for does or "ch" add "es"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?=\s|$)", "$1es")%
ELSE ;add "s"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?=\s|$)", "$1s")%
ENDIF

RETURNF ARGS:0

;--------------------------------------------------------
;changes verbs to past tense (ed)
;note this function acts on the first word of the string
;--------------------------------------------------------
@VERBT_PAST(ARGS:0)
#FUNCTIONS

;try to affect only first word if sentence is passed
LOCALS = 
IF STRCOUNT(ARGS:0, " ") > 0
	LOCALS:0 '= SPLIT_SINGLE(ARGS:0, 0, " ")
	LOCALS:1 '= REPLACE(ARGS, SPLIT_SINGLE(ARGS:0, 0, " "), "")
	ARGS:0 '= LOCALS:0
ENDIF

IF IRREGULAR_PAST_VERBS(ARGS:0) != "" ;if word is an irregular verb, replace it
	ARGS:0 = %REPLACE(ARGS:0, ARGS:0, IRREGULAR_PAST_VERBS(ARGS:0))%
ELSEIF WORD_ENDS_IN(ARGS:0, "[^aieou][aeiou][^aeiouwxy]") && (!WORD_ENDS_IN(ARGS:0, "er", "en", "o.", "[^p]el") || STRCOUNT(TOLOWER(ARGS:0), "throb|^gel$")) ;complicated to explain... CVC rule for doubling last letter (not 100% correct)
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]*[^aieou][aeiou]([^aeiouwxy]))(?=\s|$)", "$1$2ed")%
ELSEIF WORD_ENDS_IN(ARGS:0, "[^aieou]y") ;if word ends in a consonant and "y", change it to "i" and add "ed"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+[^aeiou])y(?=\s|$)", "$1ied")%
ELSEIF WORD_ENDS_IN(ARGS:0, "[aieou]", "ue", "oe", "ie") ;if word ends in vowel, add "d", not entirely correct, might need some tweaking
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?=\s|$)", "$1d")%
ELSE ;add "ed"
	ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?=\s|$)", "$1ed")%
ENDIF

SIF STRLENS(LOCALS)
	ARGS:0 = %ARGS:0%%LOCALS:1%

RETURNF ARGS:0

;--------------------------------------------------------
;A simple check for a noun to see if it's pluralized to return correct word with it
;For example generator functions such as BODYPART can return both breasts and chest
;This function should deal with that
;ARGS:0 takes the word that should be checked, ARGS:1 takes the supporting word
;Example - CHECK_PLNOUN(BODYPART("Chest", CHARA ), "get") - we will return correct form of word "get" depending on whether BODYPART's word ends on "s" or not
;use CHECK_PLVERB for stuff like "is", "has", etc
;--------------------------------------------------------
@CHECK_PLNOUN(ARGS:0, ARGS:1)
#FUNCTIONS

IF !STRCOUNT(ARGS:0,"s$") 
	ARGS:1 = %VERBT_SIMPLE(ARGS:1, 1)%
ENDIF
RETURNF ARGS:0 + " " + ARGS:1

@CHECK_PLVERB(ARGS:0, ARGS:1)
#FUNCTIONS

IF STRCOUNT(ARGS:0,"s$") 
	ARGS:1 = %PLVERB(ARGS:1, 2)%
ENDIF
RETURNF ARGS:0 + " " + ARGS:1

;--------------------------------------------------------
;Pluralizer for NOUNS (pronouns can now be handled in their normal HIS_HER() type functions, see _FUNCTION.ERB for details)
;should cover most irregular nouns that might be used
;removes "a " and "An " from the beginning of nouns
;pluralizes them if ARG:0 > 1
;I'm not going to bother with words ending in O, because most of those are spanish and italian and don't require a rule... unless we're going to start talking about potatoes a lot.
;--------------------------------------------------------
@PLNOUN(ARGS:0, ARG:0, ARG:1)
#FUNCTIONS

;try to affect only last word if sentence is passed
LOCALS =
IF STRLENS(SPLIT_SINGLE(ARGS:0, STRCOUNT(ARGS:0, " "), " "))
	FOR LOCAL, 0, STRCOUNT(ARGS:0, " ")
		LOCALS = %LOCALS + \@ STRLENS(LOCALS) ? %" "%#\@%%SPLIT_SINGLE(ARGS:0, LOCAL, " ")%
	NEXT
	ARGS:0 = %SPLIT_SINGLE(ARGS:0, STRCOUNT(ARGS:0, " "), " ")%
ENDIF

IF ARG:0 > 1
	ARG:1 = IS_CAPITALIZED(ARGS:0)
	ARGS:0 = %TOLOWER(ARGS:0)%
	;remove "a " and "an " at the beginning
	ARGS:0 = %REPLACE(ARGS:0, "^(?:a|an)\s", "")%
	SELECTCASE ARGS:0
	CASE "child"
		ARGS:0 = children
	CASE "foot"
		ARGS:0 = feet
	CASE "it"
		ARGS:0 = them
	CASE "man"
		ARGS:0 = men
	CASE "ovum"
		ARGS:0= ova
	CASE "person"
		ARGS:0 = people
	CASE "that"
		ARGS:0 = those
	CASE "this"
		ARGS:0 = these
	CASE "tooth"
		ARGS:0 = teeth
	CASE "woman"
		ARGS:0 = women
	CASE "themself"
		ARGS:0 = themselves
	CASE "tomato"
		ARGS:0 = tomatoes
	CASEELSE
		IF !WORD_ENDS_IN(ARGS:0, "kai", "ngu", "ami", "ama", "ppa", "jaku") ;many of these Japanese words don't have plural forms
			IF WORD_ENDS_IN(ARGS:0, "[^aeiou]y") ;if last letter is "y" not preceded by a vowel, drop it and add "ies"
				ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+[^aeiou])y(?=\s|$)", "$1ies")%
			ELSEIF WORD_ENDS_IN(ARGS:0, "[^f]f", "fe") ;if last letter is single "f" or "fe", replace with "ves"
				ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?:fe|f)(?=\s|$)", "$1ves")%
			ELSEIF WORD_ENDS_IN(ARGS:0, "x", "s", "ch", "sh") ;if word ends in "x", "s", "ss" "sh", or "ch" add "es"
				ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?=\s|$)", "$1es")%
			ELSE
				ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)(?=\s|$)", "$1s")%
			ENDIF
		ENDIF
	ENDSELECT
	SIF ARG:1
		ARGS:0 = %CAPITALIZE(ARGS:0)%
ENDIF

SIF STRLENS(LOCALS)
	ARGS:0 = %LOCALS% %ARGS:0%

RETURNF ARGS:0

;--------------------------------------------------------
;Pluralizer for VERBS (present tense)
;If ARG:0 > 1 pluralizes first word(verb) in ARGS:0, otherwise returns
;This function (and others) modified to only change first word, strings such as "lift up" -> "lifts up" or "carry over" -> "carries over" are acceptable
;--------------------------------------------------------
@PLVERB(ARGS:0, ARG:0)
#FUNCTIONS
	
IF ARG:0 > 1
	SELECTCASE ARGS:0 ;"be" is very irregular
	CASE "is", "are", "be"
		ARGS:0 = are
	CASE "Is", "Are", "Be"
		ARGS:0 = Are
	CASE "was", "were"
		ARGS:0 = were
	CASE "Was", "Were"
		ARGS:0 = Were
	CASE "has", "have"
		ARGS:0 = have
	CASE "Has", "Have"
		ARGS:0 = Have
	CASEELSE
		IF WORD_ENDS_IN(ARGS:0, "(?:ss|x|sh|ch|o)es") ;drop "es", ★Added o for does
			ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+(?:ss|x|sh|ch|o))es(?=\s|$)", "$1")%
		ELSEIF WORD_ENDS_IN(ARGS:0, "ies") ;replace "ies" with "y"
			ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)ies(?=\s|$)", "$1y")%
		ELSE ;drop "s"
			ARGS:0 = %REPLACE(ARGS:0, "(^[^\s]+)s(?=\s|$)", "$1")%
		ENDIF
	ENDSELECT
ENDIF

RETURNF ARGS:0

;--------------------------------------------------------
;pluralize the word if ARG is more than 1
;--------------------------------------------------------
@PLURALIZER(ARGS, ARG)
#FUNCTIONS
SIF ARG > 1 || ARG == 0
	ARGS = %PLNOUN(ARGS, 2)%
RETURNF ARGS

;same, but for outputting the value and the word at the same time
@PRINT_PLUR(ARGS, ARG)
#FUNCTIONS
RETURNF TOSTR(ARG) + " " + PLURALIZER(ARGS, ARG)

;Makes it easier to make run-on sentences
@ENGLISH_GRAMMAR_BUILDING(WHO, MODE = 0, ARGS, ARG, ARGS:1, ARG:1, ARGS:2 = "", ARG:2, ARGS:3 = "", ARG:3,ARGS:4 ="", ARG:4,ARGS:5 ="", ARG:5,ARGS:6 ="", ARG:6)
#DIM WHO
#DIM MODE
#DIMS CONNECTOR


SIF ARG
	PRINTFORM %ARGS%
SIF ARG && COUNT_CORRECT(ARG:1, ARG:2, ARG:3, ARG:4, ARG:5, ARG:6) == 1
	PRINTFORM  and 
SIF ARG && COUNT_CORRECT(ARG:1, ARG:2, ARG:3, ARG:4, ARG:5, ARG:6) > 1
	PRINTFORM , 

SIF ARG:1
	PRINTFORM %ARGS:1%
IF ARG:1 && COUNT_CORRECT(ARG) == 1 && COUNT_CORRECT(ARG:2, ARG:3, ARG:4, ARG:5, ARG:6) == 1
	PRINTFORM , and 
ELSEIF ARG:1 && COUNT_CORRECT(ARG:2, ARG:3, ARG:4, ARG:5, ARG:6) == 1
	PRINTFORM  and 
ELSEIF ARG:1 && COUNT_CORRECT(ARG:2, ARG:3, ARG:4, ARG:5, ARG:6) > 1
	PRINTFORM , 
ENDIF

SIF ARG:2
	PRINTFORM %ARGS:2%
IF ARG:2 && COUNT_CORRECT(ARG, ARG:1) && COUNT_CORRECT(ARG:3, ARG:4, ARG:5, ARG:6) == 1
	PRINTFORM , and 
ELSEIF ARG:2 && COUNT_CORRECT(ARG:3, ARG:4, ARG:5, ARG:6) == 1
	PRINTFORM  and 
ELSEIF ARG:2 && COUNT_CORRECT(ARG:3, ARG:4, ARG:5, ARG:6) > 1
	PRINTFORM , 
ENDIF

SIF ARG:3
	PRINTFORM %ARGS:3%
IF ARG:3 && COUNT_CORRECT(ARG, ARG:1, ARG:2) && COUNT_CORRECT(ARG:4, ARG:5, ARG:6) == 1
	PRINTFORM , and 
ELSEIF ARG:3 && COUNT_CORRECT(ARG:4, ARG:5, ARG:6) == 1
	PRINTFORM  and 
ELSEIF ARG:3 && COUNT_CORRECT(ARG:4, ARG:5, ARG:6) > 1
	PRINTFORM , 
ENDIF

SIF ARG:4
	PRINTFORM %ARGS:4%
IF ARG:4 && COUNT_CORRECT(ARG, ARG:1, ARG:2, ARG:3) && COUNT_CORRECT(ARG:5, ARG:6) == 1
	PRINTFORM , and 
ELSEIF ARG:4 && COUNT_CORRECT(ARG:5, ARG:6) == 1
	PRINTFORM  and 
ELSEIF ARG:4 && COUNT_CORRECT(ARG:5, ARG:6) > 1
	PRINTFORM , 
ENDIF

SIF ARG:5
	PRINTFORM %ARGS:5%
IF ARG:5 && COUNT_CORRECT(ARG, ARG:1, ARG:2, ARG:3) && COUNT_CORRECT( ARG:6) == 1
	PRINTFORM , and 
ELSEIF ARG:5 && COUNT_CORRECT( ARG:6) == 1
	PRINTFORM  and 
ENDIF

SIF ARG:6
	PRINTFORM %ARGS:6%

;--------------------------------------------------------
;a simple check for an article
;--------------------------------------------------------
@ARTICLE(ARGS:0)
#FUNCTIONS
SUBSTRING ARGS, 0, 1
SIF RESULTS == "【"
	RETURNF ARGS:0
;exceptions, add on demand
SIF STRCOUNT(ARGS:0,"(?i)^uni|^usa|^one")
	RETURNF "a " + ARGS:0

IF STRCOUNT(ARGS:0,"(?i)^[aeiouy]")
	ARGS:0 = %"an " + ARGS:0%
ELSE
	ARGS:0 = %"a " + ARGS:0%
ENDIF
RETURNF ARGS:0

;--------------------------------------------------------
;divide the word with a symbol
;ARGS:1 for the divider, - is by default
;if ARGS:1 is more than one symbol in length, the length of division will increase
;--------------------------------------------------------
@DIVIDER(ARGS, ARGS:1)
#FUNCTIONS
SIF ARGS:1 == ""
	ARGS:1 = -

FOR LOCAL, 0, STRLENS(ARGS)
	SIF STRLENS(ARGS) <= (1 + (STRLENS(ARGS:1) - 1)) + LOCAL * (2 * STRLENS(ARGS:1))
		BREAK
	ARGS = %SUBSTRING(ARGS, 0, (1 + (STRLENS(ARGS:1) - 1)) + LOCAL * (2 * STRLENS(ARGS:1)) )%%ARGS:1%%SUBSTRING(ARGS, (1 + (STRLENS(ARGS:1) - 1)) + LOCAL * (2 * STRLENS(ARGS:1)), -1)%
NEXT

RETURNF ARGS

@IS_ARE_PANTIES(ARGS)
#FUNCTIONS
IF PLURAL_PANTIES(ARGS)
	RETURNF "are"
ELSE
	RETURNF "is"
ENDIF

@IT_THEM_PANTIES(ARGS)
#FUNCTIONS
IF PLURAL_PANTIES(ARGS)
	RETURNF "them"
ELSE
	RETURNF "it"
ENDIF

@IT_THEY_PANTIES(ARGS)
#FUNCTIONS
IF PLURAL_PANTIES(ARGS)
	RETURNF "they"
ELSE
	RETURNF "it"
ENDIF

@HAS_HAVE_PANTIES(ARGS)
#FUNCTIONS
IF PLURAL_PANTIES(ARGS)
	RETURNF "have"
ELSE
	RETURNF "has"
ENDIF

@THIS_THESE_PANTIES(ARGS)
#FUNCTIONS
IF PLURAL_PANTIES(ARGS)
	RETURNF "these"
ELSE
	RETURNF "this"
ENDIF

@ARTICLE_PANTIES(ARGS)
#FUNCTIONS
IF PLURAL_PANTIES(ARGS)
	RETURNF ARGS
ELSE
	RETURNF ARTICLE(ARGS)
ENDIF

;==================================================
;Returns "-chan" or "-kun" depending on the gender of the character you pass to it
;==================================================
@CHAN_KUN(ARG)
#FUNCTIONS
IF IS_MALE(ARG)
	RETURNF @"%CALLNAME:ARG%-kun"
ELSE
	RETURNF @"%CALLNAME:ARG%-chan"
ENDIF

;check if a word is an irregular verb and return correct past tense form, currently supports only simple past
;for now it also contains only commonly used words
@IRREGULAR_PAST_VERBS(ARGS)
#FUNCTIONS

SELECTCASE TOLOWER(ARGS)
	CASE "cum"
		RETURNF "came"
	CASE "awake"
		RETURNF "awoke"
	CASE "be"
		RETURNF "was"
	CASE "beat"
		RETURNF "beat"
	CASE "become"
		RETURNF "became"
	CASE "begin"
		RETURNF "began"
	CASE "bend"
		RETURNF "bent"
	CASE "bet"
		RETURNF "bet"
	CASE "bid"
		RETURNF "bid"
	CASE "bind"
		RETURNF "bound"
	CASE "bite"
		RETURNF "bit"
	CASE "bleed"
		RETURNF "bled"
	CASE "blow"
		RETURNF "blew"
	CASE "break"
		RETURNF "broke"
	CASE "breed"
		RETURNF "bred"
	CASE "bring"
		RETURNF "brought"
	CASE "build"
		RETURNF "built"
	CASE "burn"
		RETURNF "burnt"
	CASE "burst"
		RETURNF "burst"
	CASE "buy"
		RETURNF "bought"
	CASE "can"
		RETURNF "could"
	CASE "cast"
		RETURNF "cast"
	CASE "catch"
		RETURNF "caught"
	CASE "choose"
		RETURNF "chose"
	CASE "cling"
		RETURNF "clung"
	CASE "come"
		RETURNF "came"
	CASE "cost"
		RETURNF "cost"
	CASE "cut"
		RETURNF "cut"
	CASE "deal"
		RETURNF "dealt"
	CASE "dig"
		RETURNF "dug"
	CASE "do"
		RETURNF "did"
	CASE "draw"
		RETURNF "drew"
	CASE "drink"
		RETURNF "drank"
	CASE "drive"
		RETURNF "drove"
	CASE "eat"
		RETURNF "ate"
	CASE "fall"
		RETURNF "fell"
	CASE "feed"
		RETURNF "fed"
	CASE "feel"
		RETURNF "felt"
	CASE "fight"
		RETURNF "fought"
	CASE "find"
		RETURNF "found"
	CASE "flee"
		RETURNF "fled"
	CASE "fly"
		RETURNF "flew"
	CASE "forbid"
		RETURNF "forbade"
	CASE "forecast"
		RETURNF "forecast"
	CASE "forget"
		RETURNF "forgot"
	CASE "forsake"
		RETURNF "forsook"
	CASE "freeze"
		RETURNF "froze"
	CASE "get"
		RETURNF "got"
	CASE "give"
		RETURNF "gave"
	CASE "go"
		RETURNF "went"
	CASE "grind"
		RETURNF "ground"
	CASE "grow"
		RETURNF "grew"
	CASE "hang"
		RETURNF "hung"
	CASE "have"
		RETURNF "had"
	CASE "hear"
		RETURNF "heard"
	CASE "hide"
		RETURNF "hid"
	CASE "hit"
		RETURNF "hit"
	CASE "hold"
		RETURNF "held"
	CASE "hurt"
		RETURNF "hurt"
	CASE "keep"
		RETURNF "kept"
	CASE "kneel"
		RETURNF "knelt"
	CASE "know"
		RETURNF "knew"
	CASE "lay"
		RETURNF "laid"
	CASE "lead"
		RETURNF "led"
	CASE "leave"
		RETURNF "left"
	CASE "lend"
		RETURNF "lent"
	CASE "let"
		RETURNF "let"
	CASE "lie"
		RETURNF "lay"
	CASE "light"
		RETURNF "lit"
	CASE "lose"
		RETURNF "lost"
	CASE "make"
		RETURNF "made"
	CASE "may"
		RETURNF "might"
	CASE "mean"
		RETURNF "meant"
	CASE "meet"
		RETURNF "met"
	CASE "pay"
		RETURNF "paid"
	CASE "put"
		RETURNF "put"
	CASE "quit"
		RETURNF "quit"
	CASE "read"
		RETURNF "read"
	CASE "rid"
		RETURNF "rid"
	CASE "ride"
		RETURNF "rode"
	CASE "ring"
		RETURNF "rang"
	CASE "rise"
		RETURNF "rose"
	CASE "run"
		RETURNF "ran"
	CASE "say"
		RETURNF "said"
	CASE "see"
		RETURNF "saw"
	CASE "seek"
		RETURNF "sought"
	CASE "sell"
		RETURNF "sold"
	CASE "send"
		RETURNF "sent"
	CASE "set"
		RETURNF "set"
	CASE "shake"
		RETURNF "shook"
	CASE "shall"
		RETURNF "should"
	CASE "shed"
		RETURNF "shed"
	CASE "shoot"
		RETURNF "shot"
	CASE "shit"
		RETURNF "shat"
	CASE "shrink"
		RETURNF "shrank"
	CASE "shut"
		RETURNF "shut"
	CASE "sing"
		RETURNF "sang"
	CASE "sink"
		RETURNF "sank"
	CASE "sit"
		RETURNF "sat"
	CASE "slay"
		RETURNF "slew"
	CASE "sleep"
		RETURNF "slept"
	CASE "slide"
		RETURNF "slid"
	CASE "sling"
		RETURNF "slung"
	CASE "slit"
		RETURNF "slit"
	CASE "smite"
		RETURNF "smote"
	CASE "speak"
		RETURNF "spoke"
	CASE "speed"
		RETURNF "sped"
	CASE "spend"
		RETURNF "spent"
	CASE "spin"
		RETURNF "spun"
	CASE "spit"
		RETURNF "spat"
	CASE "split"
		RETURNF "split"
	CASE "spread"
		RETURNF "spread"
	CASE "spring"
		RETURNF "sprang"
	CASE "stand"
		RETURNF "stood"
	CASE "steal"
		RETURNF "stole"
	CASE "stick"
		RETURNF "stuck"
	CASE "sting"
		RETURNF "stung"
	CASE "stink"
		RETURNF "stank"
	CASE "stride"
		RETURNF "strode"
	CASE "strike"
		RETURNF "struck"
	CASE "string"
		RETURNF "strung"
	CASE "strive"
		RETURNF "strove"
	CASE "swear"
		RETURNF "swore"
	CASE "sweat"
		RETURNF "sweat"
	CASE "sweep"
		RETURNF "swept"
	CASE "swim"
		RETURNF "swam"
	CASE "swing"
		RETURNF "swung"
	CASE "take"
		RETURNF "took"
	CASE "teach"
		RETURNF "taught"
	CASE "tear"
		RETURNF "tore"
	CASE "tell"
		RETURNF "told"
	CASE "think"
		RETURNF "thought"
	CASE "throw"
		RETURNF "threw"
	CASE "thrust"
		RETURNF "thrust"
	CASE "tread"
		RETURNF "trod"
	CASE "understand"
		RETURNF "understood"
	CASE "wake"
		RETURNF "woke"
	CASE "wear"
		RETURNF "wore"
	CASE "weave"
		RETURNF "wove"
	CASE "weep"
		RETURNF "wept"
	CASE "wet"
		RETURNF "wet"
	CASE "win"
		RETURNF "won"
	CASE "wind"
		RETURNF "wound"
	CASE "wring"
		RETURNF "wrung"
	CASE "write"
		RETURNF "wrote"
	;CASE ""
	;	RETURNF ""
ENDSELECT
